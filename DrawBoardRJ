import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RadialGradientPaint;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class DrawBoardRR extends JPanel implements MouseListener, DrawBoard {
    private int width;
    private int heigth;
	boolean change = true;
    //Chess[] Chess = new Chess[1000];
	private ChessSet chessSet = new ChessSet();
	private static DrawBoardRR instance;  
	  
	public static DrawBoardRR getInstance() {  
		if (instance == null) {  
	        instance = new DrawBoardRR();  
	    }  
	    return instance;  
	}  
	
    private DrawBoardRR () {
        this.width = 780;
        this.heigth = 780;
        addMouseListener(this);
    }

    public void paintComponent(Graphics g) {
    	g.setColor(Color.GRAY);
    	g.fillRect(0,0,840,840);
    	int a = 0;
        for (int i = 0; i < heigth / 60; i++) {
            g.setColor(Color.BLACK);
            g.drawLine(60, 60 + 60 * i, width, 60 + 60 * i);
            g.drawLine(60 + 60 * i, 60, 60 + 60 * i, width);
            a = i;
        }
        a = (a - 4) / 2;
        g.fillOval(a*60-10, a*60-10, 20, 20);
        g.fillOval((a+6)*60-10, a*60-10, 20, 20);
        g.fillOval(a*60-10, (a+6)*60-10, 20, 20);
        g.fillOval((a+6)*60-10, (a+6)*60-10, 20, 20);
        
        for(int i = 0;i < 100;i++){
                    if (chessSet.getChess(i) != null) {
                        int temp_x = chessSet.getChess(i).getX() - 25;
                        int temp_y = chessSet.getChess(i).getY() - 25;
                        RadialGradientPaint paint;
                        float[] fractions = new float[]{0f, 1f};
                        Color[] colors_b = new Color[]{Color.LIGHT_GRAY, Color.WHITE};
                        Color[] colors_w = new Color[]{Color.WHITE, Color.BLACK};
                        if (chessSet.getChess(i).getType() == true) {
                            paint = new RadialGradientPaint(temp_x+10, temp_y+10, 26, fractions, colors_w);
                        } else {
                            paint = new RadialGradientPaint(temp_x+10, temp_y+10, 26, fractions, colors_b);
                        }
                        ((Graphics2D) g).setPaint(paint);

                        ((Graphics2D) g).fillOval(temp_x, temp_y, 50, 50);
                    }
                    
        }
    } 
    @Override  
    public void mouseClicked(MouseEvent e) {
    	int x=e.getX();
		int y=e.getY();
		if(x % 60 <= 30) {
			x = x / 60 * 60;
		}
		else {
			x = x / 60 * 60 + 60;
		}
		if(y % 60 <= 30) {
			y = y / 60 * 60;
		}
		else {
			y = y / 60 * 60 + 60;
		}
		boolean a = true;
		for(int i = 0; i < 200; i++){
			if(chessSet.getChess(i) != null) {
				if(chessSet.getChess(i).getTF(x,y) == 1) {
					a = false;
				}
			}	
		}
		if(a == true) {
			Chess chessa = new Chess(change,x,y); 
			chessSet.addChess(chessSet.getChessSet(), chessa);
			if(change == true) {
				change = false;
			}
			else {
				change = true;
			}
			repaint();
		}
		
		if(gameover(chessSet.getChessSet()) == true){
			System.out.println("Gameovergameovergameover");
			String winner;
			if(change == false)
				winner = "黑方";
			else
				winner = "白方";
			String mString = String.format("游戏结束，%s 胜利！", winner);
			JOptionPane.showMessageDialog(this, mString);
		}
    }
    
    @Override
	//当用户按下并松开鼠标按钮时发生
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
	}
	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub	
	}
	public void restartGame(){
        chessSet.clear(chessSet.getChessSet());
        repaint();
    }
        public void goback(){
        	int a = chessSet.getChessNumber(chessSet.getChessSet());
            if(a != 0){
               chessSet.remove(chessSet.getChessSet());
               a--;
               change = !change;
               repaint();
            }else{
                System.out.println("没有棋子。");
            }
        }
        public boolean gameover(Chess[] Chess) {
        	chessSet.countN(Chess);
    		boolean a = false;
	        for (int i = 0; i <100; i++) {
				if(Chess[i] != null) {
					if(Chess[i].getN() == 4){
						a = true;
					}
				}
			}
			return a;
        }
}
